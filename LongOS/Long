if (not term.isColor()) then
	print('LongOS is designed for advanced computers and cannot be executed on colorless machines.');
	return;
end

oldStartTimer = os.startTimer;

os.startTimer = function(time)
	local timer = oldStartTimer(time);
	System:AddTimer(timer);
	return timer;
end

function oldSleep(time)
	local timer = oldStartTimer(time);
	repeat
		local _, eTimer = os.pullEvent('timer');
	until eTimer == timer;
end

local function draw()
	while (System:GetWorking()) do
		System:Draw();
		oldSleep(0.1);
	end
end

local function update()
	while (System:GetWorking()) do
		System:Update();
		oldSleep(0.1);
	end
end

local function catchEvents()
	while (System:GetWorking()) do
		System:CatchEvents();
	end
end

local function processEvents()
	while (System:GetWorking()) do
		System:ProcessEvents();
	end
end

local function drawGlobalErrorScreen(errorText)
	term.setTextColor(colors.lime)
	term.setBackgroundColor(colors.black);
	term.clear();
	term.setCursorPos(1,1);
	print("Uncaught error in the system's core and system was shutted down to prevent damadge to your files or property.\n\n");
	print("Error message text:");
	term.setTextColor(colors.red);
	print(errorText);
	term.setTextColor(colors.lime);
	print("\nPlease restart your computer to reload OS.");
	print("If you continue seeing this screen please contact developer and describe your problem.")
	print("You can post your issue on https://github.com/Gvin/LongOS/");
	print("Press ENTER key to reboot the system...");
	oldSleep(1);
	repeat
		local event, key = os.pullEvent('key');
	until (keys.getName(key) == 'enter');
	os.reboot();
end

local function load()
	shell.run('/LongOS/Loading.lua');

	if (LoadingErrors > 0) then
		error('Loading errors found. See loading.log for details.');
	end
	LoadingErrors = nil;
end

local success, message = pcall(load);
if (not success) then
	drawGlobalErrorScreen(message);
end

System = Classes.System.LongOS();
Classes.System.LongOS = nil;
System:ReadConfiguration();
System:ReadAutoexec();

success, message = pcall(parallel.waitForAny, update, draw, catchEvents, processEvents);
if (not success and message ~= 'parallel:22: Terminated') then
	drawGlobalErrorScreen(message);
end

os.startTimer = oldStartTimer;

term.setBackgroundColor(colors.black);
term.setTextColor(colors.white);
term.clear();
term.setCursorPos(1, 1);
print('LongOS closed.');